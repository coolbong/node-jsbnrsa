/**
 * Created by coolbong on 2015-06-03.
 */

var RSAKey = require('../lib/rsa');
var assert = require('assert');

exports.rsa = {
    'Public Certificate decrypt with RSA public key 1' : function() {
        var modulus = '98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3';
        var exponent = '03';

        var issuerPublicKeyCertificate = '21EC0FC6E1810DFEEA26545127494B40F5F12FA8670877C4B47516BBCD67EDF5F0652B437B4D3E4E83999E7B8245E2A18A7968E7C3E1C16B5609036E65E0F4AF2C4383AF19F1679DD59726C5D315B21967F5A3E526E645724B61F4C8ABCE98BEB8DF1FD64237DBE356B1F96C73EBA3206AAA4C818518E58E17F0E4265A0A5D7E2196E983C6DA78FC5C73F64E6F3AFF5A';

        var key = new RSAKey();
        key.setPublic(modulus, exponent);
        var issuerPublicKey = key.encrypt(issuerPublicKeyCertificate);
        var answer = '6A0254133390122000000101019001A078BEB21E7BEE9F85F18E15F1ABB842556A33F84390236605C57C9AAA8127CC7E9C33FBF81894BBA0F53C7D1DE61D64E7C061F1689B1B21D91F0E10A5FD9AB0FCDFC06B5D860968F34D1D04FF6770E533661196B45F219500C9B10B18B71A1464BF6B673C19D432FCB8AB4419EDCC2AE17A4472643A56D1AD98F2910DE3E1B8BC';
        assert(answer == issuerPublicKey);
    },
    'rsa public, private, private crt test' : function() {
        var n = '8A42FF7F26DFC41345259B01406754591B70843CB2B8893E1DA42DDF7C63A3E3B704AC8CA0042C093E10E0BF219357E8D6C02539ADF669FCFC1A666FB13D771F9D602583EB40C1997AF02E74C4DA38E09C44FE90D7620CE75F01055AF3C928E7D7EAA5C8FD64421217EA6EF9BA694CBB193725120DFF599ECB964C01C4E82925';
        var e = '010001';
        var d = '5C5C0316EA5E023A292FC4CAE23DE44F9E0FDC963B812054F9320A5EC7563C4DCA9D79B27AD62EA081F07E61CF4901298E034F1AA7C5FAE93F735748776AAADED4CD05FEBBD256E4CB8DD6866FA753D7747690EFC7EC8259220926446DF3529EB62A8DEF8D0503C255371BCC12DA7B49D958E96BACDDACCD332939AA609D72A1';
        var p = 'F3B68FF28A335EC18793A1D04700D9552B89E1A8C77F60D8BFD9D01A5FBE3FF077E050174B820667DA5C01B3636F23A4AFCB9EFEC4863F29EDA67D0D5B47F97D';
        var q = '913B7260F4E3C250D59F7DE0392A46ED8204228323D46A0755597BC6B54B1266E0A65EC7D57DF4661ADC38FDA0A2B423F1F63624473FBAA6A43B09C7102D3EC9';
        var dP = '82527C7520EBC95EC9C5EB4079C77D702AE107577E9EA1C626092E5BFC18BB0E36BC2F77D57BC93B1DAC1788BAC242981D1D507F41CDDBD6EAEB1D71D7FF0BED';
        var dQ = '14D9C50D187B8E8D4E6E2C834191C947161083E7F1FFF00D077AE6635BE9E04576E14BE042CD6786353B02CF9EFD5D01801E8A1D61414C09DAB043321A2774C9';
        var qInv = '360D37F2799E2706D65145FCFB4C6CF876F9392AD738E05E61D71E5161DD1F21ECA791FA56FAD0D16E4962354406858DC77B9C20C115AE33F2F37E4F5B60A061';

        var input = new Buffer('test', 'ascii');

        // public key encrypt
        var publicKey = new RSAKey();
        publicKey.setPublic(n, e);
        var cipher = publicKey.encrypt(input);

        // private key decrypt
        var privateKey = new RSAKey();
        privateKey.setPrivate(n, d);
        var text = privateKey.decrypt(cipher);
        var result = new Buffer(text, 'hex');

        assert(input.toString('ascii') == result.toString('ascii'));


        // private crt key decrypt
        var privateCrtKey = new RSAKey();
        privateCrtKey.setPrivateCrt(p, q, dP, dQ, qInv);
        var text2 = privateCrtKey.decrypt(cipher);
        var result2 = new Buffer(text2, 'hex');

        assert(input.toString('ascii') == result2.toString('ascii'));
    },
    'public key encrypt 176 byte case 1' :  function() {
        var publicKey = {
            'modulus' : 'A41B6711CAA8094D64452D3EC2A199939C7423DAB2F579C802ECDE783F34DCCD1E495CB705AB74D0104EA3FE389EB257141FB674F419A418EDC894A972E4697DFB82617929A4298BF36E563009964DB5E1B351C32FE3FA0ED4AB7C7E3745E59DF40EE847B16E573196DECF4B9FA0953727633CB30A2807AF8FAD75B1CBB3BAC9423ED0765715AE83BF5BB436738AC650AC991DB606E56644E9CCFC6A7035434D7D425C5FBF474799E09F79E31472FBF3',
            'exponent' : '010001'
        };
        var encryptedData =  '38F991C8E0F947214A470DEB79FE1B37EDE859A7323A2934C0E8DBB5E069C6D74E451A6C4C5406295CF49289EAA697E5544E71DB7424805FF3E128F5B913278B9EFE797AF82C44B089EEC12923CABD7B5A8B8DB5C629136A1CBD9A534A2AF62EBCB5D8AC2BBA57BCDD1365DD9A8A49C06E9177774F1B08F9CC416D84B7BCCCE40835E1CFBF63041FF2BCDC139FA196164B961A6B6C1751B3896E1A3F3E3DA6DB32C244583BB0A1A167E96D8957CB5EA7';

        var rsaKey = new RSAKey();
        rsaKey.setPublic(publicKey.modulus, publicKey.exponent);
        var data = rsaKey.encrypt(encryptedData);
        var buf = new Buffer(data, 'hex');
        assert(buf[0] === 0x6A);
        assert(buf[buf.length-1] === 0xBC);
    },
    'public key encrypt 176 byte case 2' :  function() {
        var publicKey = {
            'modulus' : 'A41B6711CAA8094D64452D3EC2A199939C7423DAB2F579C802ECDE783F34DCCD1E495CB705AB74D0104EA3FE389EB257141FB674F419A418EDC894A972E4697DFB82617929A4298BF36E563009964DB5E1B351C32FE3FA0ED4AB7C7E3745E59DF40EE847B16E573196DECF4B9FA0953727633CB30A2807AF8FAD75B1CBB3BAC9423ED0765715AE83BF5BB436738AC650AC991DB606E56644E9CCFC6A7035434D7D425C5FBF474799E09F79E31472FBF3',
            'exponent' : '010001'
        };
        var encryptedData = '13B32E52A2A1895DBC7E1716A885312F1798ADDFA33B6FD8C3A7394AD6E5E0116B7EE3307ED01074263D3EBF2B09F04A62A1115F4AE6ED3FF216DC7BCE1FCAA8DFDCBE98266159FDDD6CB438096DB3B02DB73B88CE6487673085657B5DA090101A20C447225D60F6496AF72F836CA86BE8B232071AC248CAFE16250DBA0DC7D3262E98260A9E5897B8AD411324C560D9A67D944060AECCA954A6FD0C232D7AF2E5679B4B16021E758AA69E46D426F382';
        var rsaKey = new RSAKey();
        rsaKey.setPublic(publicKey.modulus, publicKey.exponent);
        var data = rsaKey.encrypt(encryptedData);
        var buf = new Buffer(data, 'hex');
        assert(buf[0] === 0x6A);
        assert(buf[buf.length-1] === 0xBC);
    },
    'crt key decrypt 176 byte case 1' : function() {

        var text = '6A05012608B3E745866D73475E009C51AB67A9F64E9A99B05DE8A84B1F173AD8A151BDA5D03E999D711EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB5D0390B513CE1B1378815F53245200792AEF3433BC';
        var crtKey = {
            "p": "CDA034417CDFB5ED4ED1A75DF8955A81E3FF9A73154B30C19E5D23776A47879689688FE6C879218A3CDA012963012CFA6085009C2242EC407DE21CA69531424A319BE4D7979C100BD37B585C8C58921FDDE4DFE848594FEB",
            "q": "CC4F5ADF0C77BDC4CFBF0B5A5C399BB8DEAB6E6C54C77972E75E53BC10D8136FFC07356BBAD2CFB90E22FD3A1C2E7695E3950410D590D7304E4C4A76916296BEBC1765185EF432841DB097BE6025E74F86D49D00A8110A19",
            "dP": "640F483E71D89EBBCAB604BE9A9F7AFA680B528A1BDB89EF3DF3CEB5665746687F970D275D786C54CB85BE38F87F72F6A78F311BC9244DB89849366DED7D99E766BA98A23C9969C98770A72FE9EF93B3C41382CD929F3B5F",
            "dQ": "08A376512602CE184B3C65AB7D68C627CBEA6DB1D0E7DA3FBC7EA585B7249BB5C96F3898047F335F3CB4C80633F8D6F4C179A4815DB65112EECC94FD6C6A41BB70D28068C66306DBC5319948E861D1E4EFEB7F73EEA741C9",
            "qInv": "2F640ADC18D70966AC57EFB7CEDCE5E4EFC284AE2457E22F2E3FB4ECBEE96C5656EB09EF7A032393208C03F9B31B42BE11E2319FAA6A3A99148388B9B46A27139274C4EB70D6A338B1C262F74B4502C39A7A5F4F5A48EB36"
        };

        var answer =  '38F991C8E0F947214A470DEB79FE1B37EDE859A7323A2934C0E8DBB5E069C6D74E451A6C4C5406295CF49289EAA697E5544E71DB7424805FF3E128F5B913278B9EFE797AF82C44B089EEC12923CABD7B5A8B8DB5C629136A1CBD9A534A2AF62EBCB5D8AC2BBA57BCDD1365DD9A8A49C06E9177774F1B08F9CC416D84B7BCCCE40835E1CFBF63041FF2BCDC139FA196164B961A6B6C1751B3896E1A3F3E3DA6DB32C244583BB0A1A167E96D8957CB5EA7';

        var rsaKey = new RSAKey();
        rsaKey.setPrivateCrt(crtKey.p, crtKey.q, crtKey.dP, crtKey.dQ, crtKey.qInv);
        var data = rsaKey.decrypt(text);

        assert(answer === data);

    }

};